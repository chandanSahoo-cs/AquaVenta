generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users User[]
}

model User {
  id            String             @id @default(uuid())
  name          String?
  email         String?            @unique
  phone         String?            @unique
  passwordHash  String
  roleId        Int
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  lastLogin     DateTime?
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
  reports       Report[]
  validations   ReportValidation[]
  role          Role               @relation(fields: [roleId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model Report {
  id          String             @id @default(uuid())
  userId      String?
  category    String?
  description String?
  submittedAt DateTime           @default(now())
  status      String             @default("pending")
  severity    Int                @default(0)
  language    String?
  trustScore  Float?
  location    String?
  media       String
  user        User?              @relation(fields: [userId], references: [id])
  validations ReportValidation[]
}

model ReportValidation {
  id          String   @id @default(uuid())
  reportId    String
  validatorId String
  verdict     String
  note        String?
  validatedAt DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  validator   User     @relation(fields: [validatorId], references: [id])
}

model SocialPost {
  id                String    @id @default(uuid())
  source            String
  externalId        String?
  content           String
  userName          String?
  postedAt          DateTime?
  ingestedAt        DateTime  @default(now())
  extractedKeywords String[]
  sentimentScore    Float?
  relevanceScore    Float?    @default(0.0)
  location          String?
}

model Hotspot {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  source      String
  severity    Int?
  reportCount Int?
  lastUpdated DateTime @default(now())
  location    String
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String
  entityId   String?
  action     String
  userId     String?
  data       Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}

enum RoleName {
  citizen
  analyst
  admin
}
